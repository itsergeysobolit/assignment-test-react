{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","upTime","setUpTime","counter","setCounter","updateCounter","url","AuthStr","axios","get","headers","then","response","data","seconds","console","log","catch","error","getUpTime","useEffect","intervalID","setInterval","clearInterval","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4OAwDeA,MAnDf,WAEE,MAA4BC,mBAAS,IAArC,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KAGA,SAASC,IACPD,EAAWD,EAAU,GACjBA,EAAU,IAEZC,EAAW,IAYf,WACE,IAAME,EAAM,uEACNC,EAAU,qCAEhBC,IAAMC,IAAIH,EAAK,CACbI,QAAS,CACP,cAAiBH,EACjB,eAAgB,sBAGjBI,MAAK,SAAAC,GACJV,EAAUU,EAASC,KAAKZ,OAAOa,SAC/BC,QAAQC,IAAI,YAAcJ,EAASC,KAAKZ,OAAOa,YAEhDG,OAAM,SAAAC,GACLH,QAAQC,IAAIE,MA1BdC,IAEFJ,QAAQC,IAAI,aAAeb,GA4B7B,OAzBAiB,qBAAU,WACR,IAAMC,EAAaC,YAAYjB,EAAe,KAC9C,OAAO,kBAAMkB,cAAcF,MAC1B,CAAClB,IAuBF,qBAAKqB,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,sCAAQ,sBAAMA,UAAU,cAAhB,SAA+BrB,IAAvC,gCACA,0CAAaF,WCpCNwB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.4b2fed4d.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport './App.css';\nimport axios from 'axios'; //import axios for working with request\n\n\nfunction App() {\n\n  const [upTime, setUpTime] = useState('');\n  const [counter, setCounter] = useState(10); // initial value counter = 10 \n\n  // countdown timer\n  function updateCounter() {\n    setCounter(counter - 1); //change number\n    if (counter > 0) {\n    } else {\n      setCounter(10);\n      getUpTime(); // call function when counter <= 0\n    }\n    console.log('counter = ' + counter);\n  }\n\n  useEffect(() => {\n    const intervalID = setInterval(updateCounter, 1000);\n    return () => clearInterval(intervalID);\n  }, [counter]) //counter value changes\n\n  // request for getting our upTime from incquery server\n  function getUpTime() {\n    const url = 'http://localhost:8089/https://openmbee.incquery.io/api/server.status';\n    const AuthStr = 'Basic b3Blbm1iZWVndWVzdDpndWVzdA=='; //our auth data on format Base64\n    // get data on format json with axios\n    axios.get(url, {\n      headers: {\n        'Authorization': AuthStr,\n        'Content-Type': 'application/json'\n      }\n    })\n      .then(response => {\n        setUpTime(response.data.upTime.seconds) //pick up our seconds from response\n        console.log('uptime = ' + response.data.upTime.seconds)\n      })\n      .catch(error => {\n        console.log(error)\n      })\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>Wait <span className=\"App-counter\">{counter}</span> seconds for update upTime</p>\n        <p>upTIME = {upTime}</p>\n      </header>\n    </div>\n  );\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}